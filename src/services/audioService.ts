export type NotificationSoundType = 
  | 'route_started' 
  | 'van_arrived' 
  | 'embarked' 
  | 'at_school' 
  | 'disembarked' 
  | 'route_finished'
  | 'default';

class AudioService {
  private static instance: AudioService;
  private audioContext: AudioContext | null = null;
  private isEnabled: boolean = true;
  private audioFiles: Map<NotificationSoundType, HTMLAudioElement> = new Map();
  private useAudioFiles: boolean = true;

  static getInstance(): AudioService {
    if (!AudioService.instance) {
      AudioService.instance = new AudioService();
    }
    return AudioService.instance;
  }

  // Inicializar contexto de √°udio (necess√°rio ap√≥s intera√ß√£o do usu√°rio)
  private async initAudioContext() {
    if (!this.audioContext) {
      try {
        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
        if (this.audioContext.state === 'suspended') {
          await this.audioContext.resume();
        }
      } catch (error) {
        console.warn('‚ùå N√£o foi poss√≠vel inicializar contexto de √°udio:', error);
      }
    }
  }

  // Gerar tom usando Web Audio API
  private async generateTone(frequency: number, duration: number, volume: number = 0.3) {
    if (!this.isEnabled) return;
    
    try {
      await this.initAudioContext();
      if (!this.audioContext) return;

      const oscillator = this.audioContext.createOscillator();
      const gainNode = this.audioContext.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(this.audioContext.destination);

      oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);
      oscillator.type = 'sine';

      gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
      gainNode.gain.linearRampToValueAtTime(volume, this.audioContext.currentTime + 0.01);
      gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration);

      oscillator.start(this.audioContext.currentTime);
      oscillator.stop(this.audioContext.currentTime + duration);

    } catch (error) {
      console.warn('‚ùå Erro ao reproduzir som:', error);
    }
  }

  // Tocar sequ√™ncia de tons
  private async playToneSequence(tones: { frequency: number; duration: number; delay?: number }[]) {
    for (let i = 0; i < tones.length; i++) {
      const tone = tones[i];
      const delay = tone.delay || 0;
      
      if (delay > 0) {
        await new Promise(resolve => setTimeout(resolve, delay));
      }
      
      await this.generateTone(tone.frequency, tone.duration);
      
      // Pequena pausa entre tons
      if (i < tones.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
  }

  // Sons espec√≠ficos para cada tipo de notifica√ß√£o - sempre usa buzina
  async playNotificationSound(type: NotificationSoundType) {
    if (!this.isEnabled) {
      return;
    }

    try {
      // Tentar criar um contexto de √°udio para verificar permiss√µes
      if (!this.audioContext) {
        await this.initAudioContext();
      }

      // Tentar reproduzir buzina primeiro
      const playResult = await this.playAudioFile(type);
      
      if (playResult) {
        console.log('üîä Buzina reproduzida com sucesso');
        return; // Buzina reproduzida com sucesso
      }

      // Se a buzina n√£o estiver carregada, tentar carregar e reproduzir
      try {
        await this.loadAllAudioFiles();
      } catch (loadError) {
        console.warn('‚ö†Ô∏è Erro ao carregar arquivos de √°udio:', loadError);
      }
      
      // Tentar reproduzir novamente ap√≥s carregar
      const retryResult = await this.playAudioFile(type);
      
      if (retryResult) {
        console.log('üîä Buzina reproduzida com sucesso na segunda tentativa');
        return; // Buzina reproduzida com sucesso ap√≥s carregamento
      }

      // √öltimo recurso: som padr√£o simples
      console.warn('‚ö†Ô∏è Usando tom padr√£o como fallback');
      await this.generateTone(800, 0.3);
    } catch (error) {
      console.error('‚ùå Erro ao reproduzir som de notifica√ß√£o:', error);
    }
  }

  // Ativar/desativar sons
  setEnabled(enabled: boolean) {
    this.isEnabled = enabled;
    localStorage.setItem('notificationSoundsEnabled', enabled.toString());
    console.log('üîä Sons de notifica√ß√£o:', enabled ? 'ativados' : 'desativados');
  }

  // Verificar se sons est√£o ativados
  isAudioEnabled(): boolean {
    const saved = localStorage.getItem('notificationSoundsEnabled');
    return saved !== null ? saved === 'true' : true; // Padr√£o: ativado
  }

  // Inicializar configura√ß√µes
  async init() {
    this.isEnabled = this.isAudioEnabled();
    this.useAudioFiles = true; // Sempre usar buzina
    
    console.log('üîä AudioService inicializado - buzina habilitada');
    
    // Tentar carregar arquivo de buzina (n√£o bloquear se falhar)
    try {
      await this.loadAllAudioFiles();
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao carregar buzina na inicializa√ß√£o:', error);
    }
  }

  // Testar som da buzina (para configura√ß√µes)
  async testSound() {
    console.log('üß™ Testando buzina...');
    await this.playNotificationSound('default');
  }

  // Solicitar permiss√£o de √°udio (deve ser chamado ap√≥s intera√ß√£o do usu√°rio)
  async requestAudioPermission(): Promise<boolean> {
    try {
      // Inicializar contexto de √°udio
      await this.initAudioContext();
      
      if (!this.audioContext) {
        return false;
      }
      
      // Tentar resumir o contexto se estiver suspenso
      if (this.audioContext.state === 'suspended') {
        await this.audioContext.resume();
      }
      
      // Tocar um som muito baixo para ativar o contexto
      await this.generateTone(440, 0.05, 0.1);
      
      // Tentar carregar e reproduzir um pequeno trecho da buzina
      try {
        const testAudio = new Audio('/sounds/buzina-van.mp3');
        testAudio.volume = 0.1;
        testAudio.currentTime = 0;
        
        const playPromise = testAudio.play();
        if (playPromise) {
          await playPromise;
          // Parar rapidamente
          testAudio.pause();
          testAudio.currentTime = 0;
        }
      } catch (testError) {
        console.warn('‚ö†Ô∏è Teste de buzina falhou, mas contexto pode estar ativo');
      }
      
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao solicitar permiss√£o de √°udio:', error);
      return false;
    }
  }

  // Usar apenas um arquivo de √°udio para todas as notifica√ß√µes
  private getAudioFilePath(type: NotificationSoundType): string {
    // Usar sempre o mesmo arquivo de buzina para todas as notifica√ß√µes
    return '/sounds/buzina-van.mp3';
  }

  // Carregar arquivo de √°udio do projeto
  private async loadAudioFile(type: NotificationSoundType): Promise<HTMLAudioElement | null> {
    try {
      const audioPath = this.getAudioFilePath(type);
      const audio = new Audio(audioPath);
      
      // Configurar √°udio
      audio.volume = 0.7;
      audio.preload = 'auto';
      
      // Aguardar carregamento
      await new Promise((resolve, reject) => {
        audio.addEventListener('canplaythrough', resolve);
        audio.addEventListener('error', reject);
        audio.load();
      });
      
      console.log(`‚úÖ Arquivo de √°udio carregado: ${audioPath}`);
      return audio;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erro ao carregar arquivo de √°udio para ${type}:`, error);
      return null;
    }
  }

  // Carregar o arquivo de √°udio √∫nico
  private async loadAllAudioFiles() {
    console.log('üîÑ Tentando carregar buzina-van.mp3...');
    
    try {
      const audio = new Audio('/sounds/buzina-van.mp3');
      audio.volume = 1.0;  // Corrigido para volume m√°ximo v√°lido
      audio.preload = 'auto';
      
      // Aguardar carregamento com timeout
      await new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('Timeout ao carregar √°udio'));
        }, 10000);
        
        audio.addEventListener('canplaythrough', () => {
          clearTimeout(timeout);
          console.log('‚úÖ Buzina carregada com sucesso!');
          resolve(true);
        });
        
        audio.addEventListener('error', (e) => {
          clearTimeout(timeout);
          console.error('‚ùå Erro ao carregar buzina:', e);
          reject(e);
        });
      });
      
      this.audioFiles.set('default', audio);
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao carregar buzina-van.mp3:', error);
    }
  }

  // Reproduzir arquivo de √°udio da buzina com fallback robusto
  private async playAudioFile(type: NotificationSoundType): Promise<boolean> {
    console.log(`üîä DEBUG: playAudioFile chamado para: ${type}`);
    
    try {
      // Verificar se o contexto de √°udio est√° dispon√≠vel
      if (!this.audioContext) {
        console.log('üîä DEBUG: AudioContext n√£o dispon√≠vel, tentando inicializar...');
        await this.initAudioContext();
      }
      
      // Sempre criar uma nova inst√¢ncia da buzina para permitir sobreposi√ß√£o
      console.log('üîä DEBUG: Criando nova inst√¢ncia de Audio...');
      const audioClone = new Audio();
      
      // Configurar propriedades antes de definir src
      audioClone.volume = 1.0; // Volume m√°ximo
      audioClone.playbackRate = 1.0;
      audioClone.preload = 'auto';
      audioClone.crossOrigin = 'anonymous';
      
      console.log('üîä DEBUG: Configurando src do √°udio...');
      audioClone.src = '/sounds/buzina-van.mp3';
      
      // Promise para carregamento do √°udio com timeout mais longo
      const loadPromise = new Promise<void>((resolve, reject) => {
        let resolved = false;
        
        const onCanPlay = () => {
          if (resolved) return;
          resolved = true;
          console.log('üîä DEBUG: √Åudio carregado e pronto para reprodu√ß√£o');
          cleanup();
          resolve();
        };
        
        const onLoadedData = () => {
          if (resolved) return;
          resolved = true;
          console.log('üîä DEBUG: Dados do √°udio carregados');
          cleanup();
          resolve();
        };
        
        const onError = (e: any) => {
          if (resolved) return;
          resolved = true;
          console.error('üîä DEBUG: Erro ao carregar √°udio:', e);
          cleanup();
          reject(new Error(`Erro ao carregar arquivo de √°udio: ${e.message || 'Desconhecido'}`));
        };
        
        const cleanup = () => {
          audioClone.removeEventListener('canplay', onCanPlay);
          audioClone.removeEventListener('loadeddata', onLoadedData);
          audioClone.removeEventListener('error', onError);
        };
        
        audioClone.addEventListener('canplay', onCanPlay);
        audioClone.addEventListener('loadeddata', onLoadedData);
        audioClone.addEventListener('error', onError);
        
        // Timeout mais longo para carregamento
        setTimeout(() => {
          if (!resolved) {
            resolved = true;
            cleanup();
            reject(new Error('Timeout: arquivo demorou muito para carregar'));
          }
        }, 5000);
        
        audioClone.load();
      });
      
      // Aguardar carregamento
      await loadPromise;
      
      console.log(`üéµ DEBUG: Tentando reproduzir buzina-van.mp3 para ${type}...`);
      console.log('üîä DEBUG: Caminho do arquivo:', audioClone.src);
      console.log('üîä DEBUG: Estado do √°udio - readyState:', audioClone.readyState);
      console.log('üîä DEBUG: Estado do √°udio - networkState:', audioClone.networkState);
      console.log('üîä DEBUG: Volume:', audioClone.volume);
      console.log('üîä DEBUG: Duration:', audioClone.duration);
      
      // Tentar reproduzir com retry
      let playAttempts = 0;
      const maxAttempts = 3;
      
      while (playAttempts < maxAttempts) {
        try {
          playAttempts++;
          console.log(`üîä DEBUG: Tentativa de reprodu√ß√£o ${playAttempts}/${maxAttempts}`);
          
          const playPromise = audioClone.play();
          if (playPromise) {
            await playPromise;
          }
          
          console.log(`‚úÖ DEBUG: Buzina reproduzida com sucesso para: ${type} (tentativa ${playAttempts})`);
          return true;
        } catch (playError) {
          console.error(`‚ùå DEBUG: Erro na tentativa ${playAttempts}:`, playError);
          
          if (playAttempts === maxAttempts) {
            throw playError;
          }
          
          // Aguardar um pouco antes da pr√≥xima tentativa
          await new Promise(resolve => setTimeout(resolve, 200));
        }
      }
      
      return false;
    } catch (error) {
      console.error(`‚ùå DEBUG: Erro detalhado ao reproduzir buzina para ${type}:`, error);
      console.error('‚ùå DEBUG: Tipo do erro:', error.name);
      console.error('‚ùå DEBUG: Mensagem do erro:', error.message);
      
      // Tentar fallback com Web Audio API
      if (this.audioContext && this.audioContext.state === 'running') {
        console.log('üîä DEBUG: Tentando fallback com Web Audio API...');
        try {
          await this.generateTone(800, 0.5, 0.8);
          console.log('‚úÖ DEBUG: Fallback com Web Audio API funcionou');
          return true;
        } catch (fallbackError) {
          console.error('‚ùå DEBUG: Fallback tamb√©m falhou:', fallbackError);
        }
      }
      
      return false;
    }
  }

  // Verificar se tem arquivo de √°udio para um tipo
  hasAudioFile(type: NotificationSoundType): boolean {
    return this.audioFiles.has(type);
  }

  // Sempre usar arquivo de √°udio se dispon√≠vel
  setUseAudioFiles(use: boolean) {
    this.useAudioFiles = use;
    localStorage.setItem('useNotificationAudioFiles', use.toString());
    console.log('üéµ Buzina de notifica√ß√£o:', use ? 'ativada' : 'desativada');
  }

  // Sempre usar arquivo de √°udio por padr√£o
  shouldUseAudioFiles(): boolean {
    const saved = localStorage.getItem('useNotificationAudioFiles');
    return saved !== null ? saved === 'true' : true; // Padr√£o: sempre usar buzina
  }
}

export const audioService = AudioService.getInstance();