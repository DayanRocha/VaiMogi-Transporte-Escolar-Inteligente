export type NotificationSoundType = 
  | 'route_started' 
  | 'van_arrived' 
  | 'embarked' 
  | 'at_school' 
  | 'disembarked' 
  | 'route_finished'
  | 'default';

class AudioService {
  private static instance: AudioService;
  private audioContext: AudioContext | null = null;
  private isEnabled: boolean = true;
  private audioFiles: Map<NotificationSoundType, HTMLAudioElement> = new Map();
  private useAudioFiles: boolean = true;

  static getInstance(): AudioService {
    if (!AudioService.instance) {
      AudioService.instance = new AudioService();
    }
    return AudioService.instance;
  }

  // Inicializar contexto de √°udio (necess√°rio ap√≥s intera√ß√£o do usu√°rio)
  private async initAudioContext() {
    if (!this.audioContext) {
      try {
        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
        if (this.audioContext.state === 'suspended') {
          await this.audioContext.resume();
        }
      } catch (error) {
        console.warn('‚ùå N√£o foi poss√≠vel inicializar contexto de √°udio:', error);
      }
    }
  }

  // Gerar tom usando Web Audio API
  private async generateTone(frequency: number, duration: number, volume: number = 0.3) {
    if (!this.isEnabled) return;
    
    try {
      await this.initAudioContext();
      if (!this.audioContext) return;

      const oscillator = this.audioContext.createOscillator();
      const gainNode = this.audioContext.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(this.audioContext.destination);

      oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);
      oscillator.type = 'sine';

      gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
      gainNode.gain.linearRampToValueAtTime(volume, this.audioContext.currentTime + 0.01);
      gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration);

      oscillator.start(this.audioContext.currentTime);
      oscillator.stop(this.audioContext.currentTime + duration);

    } catch (error) {
      console.warn('‚ùå Erro ao reproduzir som:', error);
    }
  }

  // Tocar sequ√™ncia de tons
  private async playToneSequence(tones: { frequency: number; duration: number; delay?: number }[]) {
    for (let i = 0; i < tones.length; i++) {
      const tone = tones[i];
      const delay = tone.delay || 0;
      
      if (delay > 0) {
        await new Promise(resolve => setTimeout(resolve, delay));
      }
      
      await this.generateTone(tone.frequency, tone.duration);
      
      // Pequena pausa entre tons
      if (i < tones.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
  }

  // Sons espec√≠ficos para cada tipo de notifica√ß√£o - sempre usa buzina
  async playNotificationSound(type: NotificationSoundType) {
    console.log(`üîä DEBUG: ===== IN√çCIO playNotificationSound =====`);
    console.log(`üîä DEBUG: Tipo de notifica√ß√£o: ${type}`);
    console.log('üîä DEBUG: AudioService habilitado:', this.isEnabled);
    console.log('üîä DEBUG: Deve usar arquivos de √°udio:', this.useAudioFiles);
    console.log('üîä DEBUG: AudioContext estado:', this.audioContext?.state);
    console.log('üîä DEBUG: Permiss√£o de √°udio no localStorage:', localStorage.getItem('notificationSoundsEnabled'));
    
    if (!this.isEnabled) {
      console.log('üîá DEBUG: Sons desabilitados, pulando reprodu√ß√£o');
      return;
    }

    // Verificar se o usu√°rio j√° interagiu com a p√°gina
    console.log('üîä DEBUG: Verificando intera√ß√£o do usu√°rio...');
    try {
      // Tentar criar um contexto de √°udio para verificar permiss√µes
      if (!this.audioContext) {
        console.log('üîä DEBUG: Criando AudioContext...');
        await this.initAudioContext();
      }
      console.log('üîä DEBUG: AudioContext criado/verificado, estado:', this.audioContext?.state);
    } catch (error) {
      console.error('üîä DEBUG: Erro ao inicializar AudioContext:', error);
    }

    // Tentar reproduzir buzina primeiro
    console.log('üîä DEBUG: Tentando reproduzir arquivo de √°udio...');
    const playResult = await this.playAudioFile(type);
    console.log('üîä DEBUG: Resultado da reprodu√ß√£o:', playResult);
    
    if (playResult) {
      console.log('üîä DEBUG: ===== Arquivo de √°udio reproduzido com SUCESSO =====');
      return; // Buzina reproduzida com sucesso
    }

    // Se a buzina n√£o estiver carregada, tentar carregar e reproduzir
    console.log('‚ö†Ô∏è DEBUG: Buzina n√£o reproduzida, tentando carregar...');
    try {
      await this.loadAllAudioFiles();
      console.log('üîä DEBUG: Arquivos carregados, tentando reproduzir novamente...');
    } catch (loadError) {
      console.error('üîä DEBUG: Erro ao carregar arquivos:', loadError);
    }
    
    // Tentar reproduzir novamente ap√≥s carregar
    const retryResult = await this.playAudioFile(type);
    console.log('üîä DEBUG: Resultado da segunda tentativa:', retryResult);
    
    if (retryResult) {
      console.log('üîä DEBUG: ===== Arquivo reproduzido com SUCESSO na segunda tentativa =====');
      return; // Buzina reproduzida com sucesso ap√≥s carregamento
    }

    // √öltimo recurso: som padr√£o simples
    console.warn('‚ùå DEBUG: N√£o foi poss√≠vel reproduzir buzina, usando tom padr√£o');
    try {
      await this.generateTone(800, 0.3);
      console.log('üîä DEBUG: Tom padr√£o reproduzido com sucesso');
    } catch (toneError) {
      console.error('‚ùå DEBUG: Erro ao reproduzir tom padr√£o:', toneError);
    }
    console.log(`üîä DEBUG: ===== FIM playNotificationSound =====`);
  }

  // Ativar/desativar sons
  setEnabled(enabled: boolean) {
    this.isEnabled = enabled;
    localStorage.setItem('notificationSoundsEnabled', enabled.toString());
    console.log('üîä Sons de notifica√ß√£o:', enabled ? 'ativados' : 'desativados');
  }

  // Verificar se sons est√£o ativados
  isAudioEnabled(): boolean {
    const saved = localStorage.getItem('notificationSoundsEnabled');
    return saved !== null ? saved === 'true' : true; // Padr√£o: ativado
  }

  // Inicializar configura√ß√µes
  async init() {
    this.isEnabled = this.isAudioEnabled();
    this.useAudioFiles = true; // Sempre usar buzina
    
    console.log('üîä AudioService inicializado - buzina habilitada');
    
    // Tentar carregar arquivo de buzina (n√£o bloquear se falhar)
    try {
      await this.loadAllAudioFiles();
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao carregar buzina na inicializa√ß√£o:', error);
    }
  }

  // Testar som da buzina (para configura√ß√µes)
  async testSound() {
    console.log('üß™ Testando buzina...');
    await this.playNotificationSound('default');
  }

  // Solicitar permiss√£o de √°udio (deve ser chamado ap√≥s intera√ß√£o do usu√°rio)
  async requestAudioPermission(): Promise<boolean> {
    try {
      await this.initAudioContext();
      // Tocar um som muito baixo para ativar o contexto
      await this.generateTone(440, 0.01, 0.01);
      return true;
    } catch (error) {
      console.warn('‚ùå Permiss√£o de √°udio negada:', error);
      return false;
    }
  }

  // Usar apenas um arquivo de √°udio para todas as notifica√ß√µes
  private getAudioFilePath(type: NotificationSoundType): string {
    // Usar sempre o mesmo arquivo de buzina para todas as notifica√ß√µes
    return '/sounds/buzina-van.mp3';
  }

  // Carregar arquivo de √°udio do projeto
  private async loadAudioFile(type: NotificationSoundType): Promise<HTMLAudioElement | null> {
    try {
      const audioPath = this.getAudioFilePath(type);
      const audio = new Audio(audioPath);
      
      // Configurar √°udio
      audio.volume = 0.7;
      audio.preload = 'auto';
      
      // Aguardar carregamento
      await new Promise((resolve, reject) => {
        audio.addEventListener('canplaythrough', resolve);
        audio.addEventListener('error', reject);
        audio.load();
      });
      
      console.log(`‚úÖ Arquivo de √°udio carregado: ${audioPath}`);
      return audio;
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erro ao carregar arquivo de √°udio para ${type}:`, error);
      return null;
    }
  }

  // Carregar o arquivo de √°udio √∫nico
  private async loadAllAudioFiles() {
    console.log('üîÑ Tentando carregar buzina-van.mp3...');
    
    try {
      const audio = new Audio('/sounds/buzina-van.mp3');
      audio.volume = 1.0;  // Corrigido para volume m√°ximo v√°lido
      audio.preload = 'auto';
      
      // Aguardar carregamento com timeout
      await new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('Timeout ao carregar √°udio'));
        }, 10000);
        
        audio.addEventListener('canplaythrough', () => {
          clearTimeout(timeout);
          console.log('‚úÖ Buzina carregada com sucesso!');
          resolve(true);
        });
        
        audio.addEventListener('error', (e) => {
          clearTimeout(timeout);
          console.error('‚ùå Erro ao carregar buzina:', e);
          reject(e);
        });
      });
      
      this.audioFiles.set('default', audio);
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao carregar buzina-van.mp3:', error);
    }
  }

  // Reproduzir arquivo de √°udio da buzina com fallback robusto
  private async playAudioFile(type: NotificationSoundType): Promise<boolean> {
    console.log(`üîä DEBUG: playAudioFile chamado para: ${type}`);
    
    try {
      // Verificar se o usu√°rio j√° interagiu com a p√°gina
      console.log('üîä DEBUG: Verificando permiss√µes de √°udio...');
      
      // Sempre criar uma nova inst√¢ncia da buzina para permitir sobreposi√ß√£o
      console.log('üîä DEBUG: Criando nova inst√¢ncia de Audio...');
      const audioClone = new Audio('/sounds/buzina-van.mp3');
      console.log('üîä DEBUG: Audio criado, configurando propriedades...');
      
      audioClone.volume = 0.8; // Volume alto para notifica√ß√µes
      audioClone.playbackRate = 1.0;
      audioClone.currentTime = 0;
      
      // Timeout para detectar arquivos corrompidos ou vazios
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout: arquivo pode estar corrompido')), 3000);
      });
      
      // Promise para carregamento do √°udio
      const loadPromise = new Promise<void>((resolve, reject) => {
        const onCanPlay = () => {
          console.log('üîä DEBUG: √Åudio carregado e pronto para reprodu√ß√£o');
          audioClone.removeEventListener('canplay', onCanPlay);
          audioClone.removeEventListener('error', onError);
          resolve();
        };
        
        const onError = (e: any) => {
          console.error('üîä DEBUG: Erro ao carregar √°udio:', e);
          audioClone.removeEventListener('canplay', onCanPlay);
          audioClone.removeEventListener('error', onError);
          reject(new Error('Erro ao carregar arquivo de √°udio'));
        };
        
        audioClone.addEventListener('canplay', onCanPlay);
        audioClone.addEventListener('error', onError);
        audioClone.load();
      });
      
      // Aguardar carregamento com timeout
      await Promise.race([loadPromise, timeoutPromise]);
      
      console.log(`üéµ DEBUG: Tentando reproduzir buzina-van.mp3 para ${type}...`);
      console.log('üîä DEBUG: Caminho do arquivo:', audioClone.src);
      console.log('üîä DEBUG: Estado do √°udio - readyState:', audioClone.readyState);
      console.log('üîä DEBUG: Estado do √°udio - networkState:', audioClone.networkState);
      
      // Tentar reproduzir
      const playPromise = audioClone.play();
      await playPromise;
      
      console.log(`‚úÖ DEBUG: Buzina reproduzida com sucesso para: ${type}`);
      return true;
    } catch (error) {
      console.error(`‚ùå DEBUG: Erro detalhado ao reproduzir buzina para ${type}:`, error);
      console.error('‚ùå DEBUG: Tipo do erro:', error.name);
      console.error('‚ùå DEBUG: Mensagem do erro:', error.message);
      
      // Se for erro de intera√ß√£o do usu√°rio, tentar solicitar permiss√£o
      if (error.name === 'NotAllowedError' || error.message.includes('user activation')) {
        console.warn('‚ö†Ô∏è DEBUG: Erro de permiss√£o de √°udio - usu√°rio precisa interagir primeiro');
        console.warn('‚ö†Ô∏è DEBUG: Tentando solicitar permiss√£o...');
        
        try {
          await this.requestAudioPermission();
          console.log('‚úÖ DEBUG: Permiss√£o de √°udio obtida, tentando novamente...');
          
          // Tentar novamente ap√≥s obter permiss√£o
          const audioRetry = new Audio('/sounds/buzina-van.mp3');
          audioRetry.volume = 0.8;
          await audioRetry.play();
          console.log(`‚úÖ DEBUG: Buzina reproduzida com sucesso ap√≥s permiss√£o para: ${type}`);
          return true;
        } catch (retryError) {
          console.error('‚ùå DEBUG: Falha mesmo ap√≥s solicitar permiss√£o:', retryError);
        }
      }
      
      return false;
    }
  }

  // Verificar se tem arquivo de √°udio para um tipo
  hasAudioFile(type: NotificationSoundType): boolean {
    return this.audioFiles.has(type);
  }

  // Sempre usar arquivo de √°udio se dispon√≠vel
  setUseAudioFiles(use: boolean) {
    this.useAudioFiles = use;
    localStorage.setItem('useNotificationAudioFiles', use.toString());
    console.log('üéµ Buzina de notifica√ß√£o:', use ? 'ativada' : 'desativada');
  }

  // Sempre usar arquivo de √°udio por padr√£o
  shouldUseAudioFiles(): boolean {
    const saved = localStorage.getItem('useNotificationAudioFiles');
    return saved !== null ? saved === 'true' : true; // Padr√£o: sempre usar buzina
  }
}

export const audioService = AudioService.getInstance();